name: Generate Contributor Statistics

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

jobs:
  contributor-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Contributor Statistics
        run: |
          echo "📊 CONTRIBUTOR STATISTICS" >> $GITHUB_STEP_SUMMARY
          echo "=========================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📈 Commits per Contributor" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git shortlog -s -n >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📝 Detailed Contributor Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Contributor | Commits | Lines Added | Lines Deleted | Files Changed |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|-------------|---------------|---------------|" >> $GITHUB_STEP_SUMMARY

          # Get unique contributors
          git log --pretty=format:"%aE" | sort | uniq | while read email; do
            if [ ! -z "$email" ]; then
              # Get contributor name
              name=$(git log --author="$email" --pretty=format:"%an" | head -1)
              
              # Count commits
              commits=$(git log --author="$email" --oneline | wc -l)
              
              # Count lines added/deleted
              lines_added=$(git log --author="$email" --pretty=tformat: --numstat | awk '{add+=$1} END {printf "%d", add}')
              lines_deleted=$(git log --author="$email" --pretty=tformat: --numstat | awk '{del+=$2} END {printf "%d", del}')
              
              # Count files changed
              files_changed=$(git log --author="$email" --name-only --pretty=format: | grep -v "^$" | sort | uniq | wc -l)
              
              # Clean up the name (remove special characters)
              clean_name=$(echo "$name" | sed 's/[^a-zA-Z0-9 ]//g')
              
              echo "| $clean_name | $commits | $lines_added | $lines_deleted | $files_changed |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Repository Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Total commits
          total_commits=$(git rev-list --count HEAD)
          echo "**Total Commits:** $total_commits" >> $GITHUB_STEP_SUMMARY

          # Total contributors
          total_contributors=$(git log --pretty=format:"%aE" | sort | uniq | wc -l)
          echo "**Total Contributors:** $total_contributors" >> $GITHUB_STEP_SUMMARY

          # Repository age
          first_commit=$(git log --reverse --pretty=format:"%ad" --date=short | head -1)
          echo "**First Commit:** $first_commit" >> $GITHUB_STEP_SUMMARY

          # Last commit
          last_commit=$(git log -1 --pretty=format:"%ad" --date=short)
          echo "**Last Commit:** $last_commit" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Generated on: $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Generate Enhanced Statistics
        run: |
          echo "## 📊 Enhanced Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Commits by month (last 12 months)
          echo "### 📅 Commits by Month (Last 12 Months)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git log --since="12 months ago" --pretty=format:"%ad" --date=format:"%Y-%m" | sort | uniq -c | sort -nr >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Most active contributors (last 30 days)
          echo "### 🔥 Most Active Contributors (Last 30 Days)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git log --since="30 days ago" --pretty=format:"%an" | sort | uniq -c | sort -nr | head -5 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # File type analysis
          echo "### 📁 File Type Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git log --name-only --pretty=format: | grep -v "^$" | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate SVG Contributor Widget
        run: |
          # Create SVG with contributor avatars and stats
          cat > generate_svg.py << 'EOF'
          import json
          import subprocess
          import re
          from datetime import datetime

          def get_contributors():
              # Get contributor data from git
              result = subprocess.run(['git', 'shortlog', '-s', '-n'], capture_output=True, text=True)
              contributors = []
              
              for line in result.stdout.strip().split('\n'):
                  if line.strip():
                      parts = line.strip().split('\t')
                      if len(parts) >= 2:
                          commits = int(parts[0])
                          name = parts[1]
                          contributors.append({'name': name, 'commits': commits})
              
              return sorted(contributors, key=lambda x: x['commits'], reverse=True)[:10]

          def generate_svg(contributors):
              svg_width = 800
              svg_height = 200
              avatar_size = 60
              padding = 20
              items_per_row = 5
              
              svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="{svg_width}" height="{svg_height}" viewBox="0 0 {svg_width} {svg_height}">
              <defs>
                  <style>
                      .contributor-card {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }}
                      .contributor-name {{ font-size: 12px; font-weight: 600; fill: #24292f; text-anchor: middle; }}
                      .contributor-commits {{ font-size: 10px; fill: #656d76; text-anchor: middle; }}
                      .contributor-avatar {{ border-radius: 50%; }}
                  </style>
              </defs>
              <rect width="{svg_width}" height="{svg_height}" fill="#f6f8fa" stroke="#d0d7de" stroke-width="1" rx="8"/>
              <text x="{svg_width//2}" y="20" text-anchor="middle" font-size="16" font-weight="600" fill="#24292f">Top Contributors</text>
              '''
              
              for i, contributor in enumerate(contributors):
                  row = i // items_per_row
                  col = i % items_per_row
                  
                  x = padding + col * (avatar_size + padding * 2)
                  y = 50 + row * (avatar_size + 40)
                  
                  # Avatar placeholder (GitHub doesn't allow direct avatar access without API)
                  avatar_url = f"https://github.com/{contributor['name'].replace(' ', '')}.png"
                  
                  svg += f'''
                  <g class="contributor-card">
                      <circle cx="{x + avatar_size//2}" cy="{y + avatar_size//2}" r="{avatar_size//2}" fill="#d0d7de" stroke="#24292f" stroke-width="2"/>
                      <text x="{x + avatar_size//2}" y="{y + avatar_size//2}" text-anchor="middle" dominant-baseline="middle" font-size="20" fill="#24292f">{contributor['name'][:2].upper()}</text>
                      <text class="contributor-name" x="{x + avatar_size//2}" y="{y + avatar_size + 15}">{contributor['name'][:12]}</text>
                      <text class="contributor-commits" x="{x + avatar_size//2}" y="{y + avatar_size + 28}">{contributor['commits']} commits</text>
                  </g>
                  '''
              
              svg += f'''
              <text x="{svg_width//2}" y="{svg_height - 10}" text-anchor="middle" font-size="10" fill="#656d76">Generated on {datetime.now().strftime('%Y-%m-%d %H:%M')}</text>
              </svg>'''
              
              return svg

          contributors = get_contributors()
          svg_content = generate_svg(contributors)

          with open('contributors-widget.svg', 'w') as f:
              f.write(svg_content)

          print(f"Generated SVG with {len(contributors)} contributors")
          EOF

          python3 generate_svg.py

      - name: Generate Custom Badges
        run: |
          # Create custom badges for top contributors
          cat > generate_badges.py << 'EOF'
          import subprocess
          import json

          def get_top_contributors():
              result = subprocess.run(['git', 'shortlog', '-s', '-n'], capture_output=True, text=True)
              contributors = []
              
              for line in result.stdout.strip().split('\n'):
                  if line.strip():
                      parts = line.strip().split('\t')
                      if len(parts) >= 2:
                          commits = int(parts[0])
                          name = parts[1]
                          contributors.append({'name': name, 'commits': commits})
              
              return sorted(contributors, key=lambda x: x['commits'], reverse=True)

          def create_badge_svg(text, color, width=120, height=20):
              return f'''<svg xmlns="http://www.w3.org/2000/svg" width="{width}" height="{height}" viewBox="0 0 {width} {height}">
              <rect width="{width}" height="{height}" fill="{color}" rx="3"/>
              <text x="{width//2}" y="{height//2 + 3}" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="white" font-weight="bold">{text}</text>
              </svg>'''

          contributors = get_top_contributors()

          # Generate badges for top 3 contributors
          badges = []
          colors = ['#28a745', '#007bff', '#ffc107']  # Green, Blue, Yellow

          for i, contributor in enumerate(contributors[:3]):
              if contributor['commits'] > 0:
                  badge_text = f"#{i+1} {contributor['name'][:8]} ({contributor['commits']} commits)"
                  badge_svg = create_badge_svg(badge_text, colors[i])
                  
                  with open(f'badge-top-{i+1}.svg', 'w') as f:
                      f.write(badge_svg)
                  
                  badges.append(f'badge-top-{i+1}.svg')

          # Generate milestone badges
          total_commits = sum(c['commits'] for c in contributors)

          milestone_badges = []
          if total_commits >= 100:
              milestone_badges.append(('100+ Commits', '#28a745'))
          if total_commits >= 200:
              milestone_badges.append(('200+ Commits', '#007bff'))
          if len(contributors) >= 5:
              milestone_badges.append(('5+ Contributors', '#6f42c1'))
          if len(contributors) >= 10:
              milestone_badges.append(('10+ Contributors', '#fd7e14'))

          for text, color in milestone_badges:
              badge_svg = create_badge_svg(text, color)
              filename = f'badge-{text.lower().replace("+", "plus").replace(" ", "-")}.svg'
              with open(filename, 'w') as f:
                  f.write(badge_svg)
              badges.append(filename)

          print(f"Generated {len(badges)} badges")
          EOF

          python3 generate_badges.py

      - name: Create Contributors File
        run: |
          echo "# 📊 Contributor Statistics" > CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          echo "## 📈 Commits per Contributor" >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          echo '```' >> CONTRIBUTORS.md
          git shortlog -s -n >> CONTRIBUTORS.md
          echo '```' >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md

          echo "## 📝 Detailed Analysis" >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          echo "| Contributor | Commits | Lines Added | Lines Deleted | Files Changed |" >> CONTRIBUTORS.md
          echo "|-------------|---------|-------------|---------------|---------------|" >> CONTRIBUTORS.md

          git log --pretty=format:"%aE" | sort | uniq | while read email; do
            if [ ! -z "$email" ]; then
              name=$(git log --author="$email" --pretty=format:"%an" | head -1)
              commits=$(git log --author="$email" --oneline | wc -l)
              lines_added=$(git log --author="$email" --pretty=tformat: --numstat | awk '{add+=$1} END {printf "%d", add}')
              lines_deleted=$(git log --author="$email" --pretty=tformat: --numstat | awk '{del+=$2} END {printf "%d", del}')
              files_changed=$(git log --author="$email" --name-only --pretty=format: | grep -v "^$" | sort | uniq | wc -l)
              clean_name=$(echo "$name" | sed 's/[^a-zA-Z0-9 ]//g')
              echo "| $clean_name | $commits | $lines_added | $lines_deleted | $files_changed |" >> CONTRIBUTORS.md
            fi
          done

          echo "" >> CONTRIBUTORS.md
          echo "## 🎯 Repository Summary" >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          echo "- **Total Commits:** $(git rev-list --count HEAD)" >> CONTRIBUTORS.md
          echo "- **Total Contributors:** $(git log --pretty=format:"%aE" | sort | uniq | wc -l)" >> CONTRIBUTORS.md
          echo "- **First Commit:** $(git log --reverse --pretty=format:"%ad" --date=short | head -1)" >> CONTRIBUTORS.md
          echo "- **Last Commit:** $(git log -1 --pretty=format:"%ad" --date=short)" >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          echo "*Generated on: $(date)*" >> CONTRIBUTORS.md

      - name: Commit All Generated Files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add files that exist
          git add CONTRIBUTORS.md
          git add contributors-widget.svg 2>/dev/null || true

          # Add badge files if they exist
          for badge in badge-*.svg; do
            if [ -f "$badge" ]; then
              git add "$badge"
            fi
          done

          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "📊 Update contributor statistics, SVG widget, and badges [skip ci]"
            git push
          else
            echo "No changes to commit"
          fi
