generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PapelUsuario {
  DISCENTE
  DOCENTE
}

enum TipoVaga {
  ESTAGIO
  TRAINEE
  VOLUNTARIO
  PESQUISA
  CLT
  PJ
}

enum StatusItemAchadoEPerdido {
  DEVOLVIDO
  PERDIDO
}

enum TipoEntidade {
  LABORATORIO
  GRUPO_PESQUISA
  LIGA_ACADEMICA
  OUTRO
}

enum PapelMembro {
  ADMIN
  MEMBRO
}

enum TipoProjeto {
  PESSOAL
  ENTIDADE
}

model Campus {
  id      String   @id @default(uuid())
  nome    String   @unique
  centros Centro[]
}

model Centro {
  id        String @id @default(uuid())
  nome      String @unique
  sigla     String @unique
  descricao String?

  campusId String
  campus   Campus @relation(fields: [campusId], references: [id])

  cursos      Curso[]
  publicacoes Publicacao[]
  projetos    Projeto[]
  vagas       Vaga[]
  usuarios    Usuario[]
  entidades   Entidade[]
}

model Curso {
  id       String @id @default(uuid())
  nome     String @unique
  centroId String

  centro   Centro    @relation(fields: [centroId], references: [id])
  usuarios Usuario[]
}

model Usuario {
  id              String   @id @default(uuid())
  membroDeEntidades MembroEntidade[]
  nome            String
  email           String   @unique
  matricula       String?  @unique
  senhaHash       String
  papel           PapelUsuario
  permissoes      String[] @default([])
  eVerificado     Boolean  @default(false)
  bio             String?
  urlFotoPerfil   String?
  periodo         Int?
  criadoEm        DateTime @default(now())
  atualizadoEm    DateTime @updatedAt

  centroId String
  cursoId  String?

  centro Centro? @relation(fields: [centroId], references: [id])
  curso  Curso?  @relation(fields: [cursoId], references: [id])

  publicacoes     Publicacao[]
  vagasPublicadas Vaga[]
  itensAchadosEPerdidos ItemAchadoEPerdido[]
  projetos        Projeto[]
  projetosMembro  Projeto[] @relation("MembrosDoProjeto")
  entidadesCriadas Entidade[] @relation("CriadorDeEntidade")
}

model Publicacao {
  id           String   @id @default(uuid())
  entidadeId   String?
  entidade     Entidade?   @relation(fields: [entidadeId], references: [id], onDelete: Cascade)
  titulo       String
  conteudo     String
  autorId      String
  centroId     String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  autor  Usuario @relation(fields: [autorId], references: [id])
  centro Centro  @relation(fields: [centroId], references: [id])
}

model Projeto {
  id           String      @id @default(uuid())
  entidadeId   String?
  entidade     Entidade?   @relation(fields: [entidadeId], references: [id], onDelete: Cascade)
  titulo       String
  descricao    String
  criadorId    String
  centroId     String
  tags         String[]
  url          String?
  urlFoto      String?
  tipo         TipoProjeto
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt

  criador Usuario @relation(fields: [criadorId], references: [id])
  centro  Centro  @relation(fields: [centroId], references: [id])
  membros Usuario[] @relation("MembrosDoProjeto")
}

model Vaga {
  id           String   @id @default(uuid())
  entidadeId   String?
  entidade     Entidade?   @relation(fields: [entidadeId], references: [id], onDelete: Cascade)
  titulo       String
  descricao    String
  tipoVaga     TipoVaga
  eAtiva       Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  publicadorId String
  centroId     String

  publicador Usuario @relation(fields: [publicadorId], references: [id])
  centro     Centro  @relation(fields: [centroId], references: [id])
}

model ItemAchadoEPerdido {
  id           String                  @id @default(uuid())
  titulo       String
  descricao    String
  urlsFotos    String[]                @default([])
  status       StatusItemAchadoEPerdido @default(PERDIDO)
  autorId      String
  criadoEm     DateTime                @default(now())
  atualizadoEm DateTime                @updatedAt

  autor Usuario @relation(fields: [autorId], references: [id])
}

model Entidade {
  id          String    @id @default(uuid())
  nome        String
  descricao   String?
  tipo        TipoEntidade
  urlFoto     String?
  contato     String?
  centroId    String
  criadorId   String

  centro      Centro          @relation(fields: [centroId], references: [id])
  criador     Usuario         @relation("CriadorDeEntidade", fields: [criadorId], references: [id])
  membros     MembroEntidade[]
  projetos    Projeto[]
  publicacoes Publicacao[]
  vagas       Vaga[]

  @@unique([nome, tipo])
}

model MembroEntidade {
  id         String      @id @default(uuid())
  usuarioId  String
  entidadeId String
  papel      PapelMembro

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  entidade Entidade @relation(fields: [entidadeId], references: [id])

  @@unique([usuarioId, entidadeId])
}

